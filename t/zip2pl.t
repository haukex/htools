#!/usr/bin/env perl
use warnings;
use strict;
use utf8;

=head1 SYNOPSIS

Tests for F<zip2pl>.

=head1 AUTHOR, COPYRIGHT, AND LICENSE

Copyright (c) 2019 Hauke Daempfling (haukex@zero-g.net)
at the Leibniz Institute of Freshwater Ecology and Inland Fisheries (IGB),
Berlin, Germany, L<http://www.igb-berlin.de/>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but B<WITHOUT ANY WARRANTY>; without even the implied warranty of
B<MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE>. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see L<http://www.gnu.org/licenses/>.

=cut

use Path::Class qw/dir/;
use FindBin;
use Cwd 'getcwd';
use Capture::Tiny qw/capture/;
use IPC::Run3::Shell ':run';
use File::Temp qw/tempfile/;
use charnames ':full';

use Test::More tests=>10;
use Test::Perl::Critic -severity=>3, -verbose=>9,
	-exclude => [];
use Test::Pod;

my $ZIP2PL = dir($FindBin::Bin)->parent->file('zip2pl');

critic_ok("$FindBin::Bin/$FindBin::Script");
critic_ok("$ZIP2PL");
pod_file_ok("$FindBin::Bin/$FindBin::Script");
pod_file_ok("$ZIP2PL");

my $expect = <<'__END_SAMPLE__';
use warnings;
use strict;
use utf8;
use Archive::Zip 'AZ_OK';
use MIME::Base64 'decode_base64';
my $zip = Archive::Zip->new();
# This code was generated by zip2pl 0.01 from "<<TEMPNAME>>"
$zip->addString(do{chop(my $x=<<'END');utf8::encode($x);$x},"utf8.txt");
H€llo, 🐪 Wörld!
END
$zip->addString(do{utf8::encode(my $x=<<'END_MQ==');$x},"foo/ascii.txt");
Hello, World!
END_MA==
This is a test
END
END_MQ==
$zip->addString(decode_base64(<<'END'),"bar.bin");
AAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIjJCUmJygpKissLS4vMDEyMzQ1Njc4
OTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXV5fYGFiY2RlZmdoaWprbG1ub3Bx
cnN0dXZ3eHl6e3x9fn+AgYKDhIWGh4iJiouMjY6PkJGSk5SVlpeYmZqbnJ2en6ChoqOkpaanqKmq
q6ytrq+wsbKztLW2t7i5uru8vb6/wMHCw8TFxsfIycrLzM3Oz9DR0tPU1dbX2Nna29zd3t/g4eLj
5OXm5+jp6uvs7e7v8PHy8/T19vf4+fr7/P3+/wo=
END
binmode STDOUT;
$zip->writeToFileHandle(\*STDOUT,0) == AZ_OK
	or die "Failed to write ZIP";
__END_SAMPLE__

my ($outzip,$stderr) = capture {
	eval "$expect; 1" or die $@//'unknown error';  ## no critic (ProhibitStringyEval)
};
is $stderr, '', 'STDERR empty';

my ($tfh,$tfn) = tempfile(UNLINK=>1,SUFFIX=>'.zip',TMPDIR=>1);
print $tfh $outzip;
close $tfh;
$expect=~s/<<TEMPNAME>>/$tfn/;

my $outpl = run $ZIP2PL, $tfn, {fail_on_stderr=>1,binmode_stdout=>':raw:encoding(UTF-8)'};
is $outpl, $expect, 'source matches';

my $tempdir = Path::Class::tempdir(CLEANUP => 1);
my $_prevdir = getcwd;
END { chdir $_prevdir if defined $_prevdir }
note "Working in $tempdir";
chdir $tempdir or die "chdir $tempdir: $!";

is run('unzip', '-q', $tfn, {fail_on_stderr=>1}), '', 'unzip no stdout';

is $tempdir->file('utf8.txt')->slurp(iomode=>'<:raw:encoding(UTF-8)'),
	"H\N{U+20AC}llo, \N{DROMEDARY CAMEL} W\N{U+F6}rld!", 'unzipped utf8.txt';

is $tempdir->file('foo','ascii.txt')->slurp(),
	"Hello, World!\nEND_MA==\nThis is a test\nEND\n",
		'unzipped foo/ascii.txt';

is $tempdir->file('bar.bin')->slurp(iomode=>'<:raw'),
	pack('C*',0..255)."\n", 'unzipped bar.bin';

